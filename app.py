# app.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ImportError)

import streamlit as st
from PIL import Image
import torch
# ******** 1. ‡∏•‡∏ö ViltForImageAndTextClassification ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å import ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á ********
from transformers import AutoProcessor

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
st.set_page_config(layout="wide", page_title="‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß", page_icon="üë©‚Äç‚öïÔ∏è")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ---
@st.cache_resource
def load_wound_model():
    from transformers import AutoModelForImageClassification
    processor = AutoProcessor.from_pretrained("Hemg/Wound-Image-classification")
    model = AutoModelForImageClassification.from_pretrained("Hemg/Wound-Image-classification")
    return processor, model

@st.cache_resource
def load_acne_model():
    from transformers import AutoModelForImageClassification
    model_name = "imfarzanansari/skintelligent-acne"
    processor = AutoProcessor.from_pretrained(model_name)
    model = AutoModelForImageClassification.from_pretrained(model_name)
    return processor, model

@st.cache_resource
def load_dermatology_model():
    # ******** 2. ‡∏¢‡πâ‡∏≤‡∏¢ ViltForImageAndTextClassification ‡∏°‡∏≤ import ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ********
    from transformers import ViltForImageAndTextClassification
    model_name = "dandelin/vilt-b32-finetuned-dermnet"
    processor = AutoProcessor.from_pretrained(model_name)
    model = ViltForImageAndTextClassification.from_pretrained(model_name)
    return processor, model

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏• ---
def predict(image, processor, model, text_input="a photo of a skin condition"):
    # ‡πÇ‡∏°‡πÄ‡∏î‡∏• Vilt ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏ï‡πâ‡∏≠‡∏á import ‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ isinstance
    from transformers import ViltForImageAndTextClassification

    if image.mode != "RGB":
        image = image.convert("RGB")

    if isinstance(model, ViltForImageAndTextClassification):
        inputs = processor(images=image, text=text_input, return_tensors="pt")
    else: 
        inputs = processor(images=image, return_tensors="pt")

    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
        
    probabilities = torch.nn.functional.softmax(logits, dim=-1)
    num_classes = model.config.num_labels
    k_value = min(num_classes, 7)
    top_prob, top_catid = torch.topk(probabilities, k_value)
    
    results = []
    for i in range(top_prob.size(1)):
        label = model.config.id2label[top_catid[0][i].item()]
        prob = top_prob[0][i].item()
        results.append({"label": label, "score": prob})
    return results

# --- ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
wound_translation_dict = {
    "Abrasions": "‡πÅ‡∏ú‡∏•‡∏ñ‡∏•‡∏≠‡∏Å", "Bruises": "‡πÅ‡∏ú‡∏•‡∏ü‡∏Å‡∏ä‡πâ‡∏≥", "Burns": "‡πÅ‡∏ú‡∏•‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ/‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô‡∏•‡∏ß‡∏Å", "Cut": "‡πÅ‡∏ú‡∏•‡∏ö‡∏≤‡∏î / ‡πÅ‡∏ú‡∏•‡∏ï‡∏±‡∏î", "Diabetic Wounds": "‡πÅ‡∏ú‡∏•‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô", "Laceration": "‡πÅ‡∏ú‡∏•‡∏â‡∏µ‡∏Å‡∏Ç‡∏≤‡∏î", "Normal": "‡∏ú‡∏¥‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥", "Pressure Wounds": "‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö", "Venous Wounds": "‡πÅ‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏î‡∏≥", "extravasation-wound-images": "‡πÅ‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤", "foot-ulcers": "‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πâ‡∏≤", "haemangioma": "‡∏õ‡∏≤‡∏ô‡πÅ‡∏î‡∏á", "leg-ulcer-images": "‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤", "malignant-wound-images": "‡πÅ‡∏ú‡∏•‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á", "meningitis": "‡πÅ‡∏ú‡∏•‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏°‡∏™‡∏°‡∏≠‡∏á‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö", "miscellaneous": "‡πÅ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "orthopaedic-wounds": "‡πÅ‡∏ú‡∏•‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å", "pilonidal-sinus": "‡∏ù‡∏µ‡∏Ñ‡∏±‡∏ì‡∏ë‡∏™‡∏π‡∏ï‡∏£", "pressure-ulcer-images-a": "‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó A)", "pressure-ulcer-images-b": "‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó B)", "toes": "‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡πâ‡∏ß‡πÄ‡∏ó‡πâ‡∏≤"
}
acne_translation_dict = {
    "level -1": "‡∏ú‡∏¥‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥ (Clear Skin)", "level 0": "‡∏°‡∏µ‡∏™‡∏¥‡∏ß‡∏õ‡∏£‡∏∞‡∏õ‡∏£‡∏≤‡∏¢ (Occasional Spots)", "level 1": "‡∏™‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (Mild Acne)", "level 2": "‡∏™‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Moderate Acne)", "level 3": "‡∏™‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á (Severe Acne)", "level 4": "‡∏™‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å (Very Severe Acne)"
}
dermatology_translation_dict = {
    'actinic keratosis basal cell carcinoma and other malignant lesions': '‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á', 'acne and rosacea photos': '‡∏™‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏á', 'atopic dermatitis photos': '‡πÇ‡∏£‡∏Ñ‡∏ú‡∏∑‡πà‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏û‡πâ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á', 'bullous disease photos': '‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ï‡∏∏‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏û‡∏≠‡∏á', 'cellulitis impetigo and other bacterial infections': '‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á', 'eczema photos': '‡πÇ‡∏£‡∏Ñ‡∏ú‡∏∑‡πà‡∏ô‡πÅ‡∏û‡πâ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á (Eczema)', 'exanthems and drug eruptions': '‡∏ú‡∏∑‡πà‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏£‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ú‡∏∑‡πà‡∏ô‡πÅ‡∏û‡πâ‡∏¢‡∏≤', 'hair loss photos alopecia and other hair diseases': '‡∏ú‡∏°‡∏£‡πà‡∏ß‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ú‡∏°', 'herpes hpv and other stds photos': '‡πÇ‡∏£‡∏Ñ‡πÄ‡∏£‡∏¥‡∏°, HPV ‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå', 'light diseases and disorders of pigmentation': '‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏á‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏ß‡∏∞‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥', 'lupus and other connective tissue diseases': '‡πÇ‡∏£‡∏Ñ‡πÅ‡∏û‡πâ‡∏†‡∏π‡∏°‡∏¥‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (Lupus)', 'melanoma skin cancer nevi and moles': '‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡πÄ‡∏°‡∏•‡∏≤‡πÇ‡∏ô‡∏°‡∏≤, ‡πÑ‡∏ù', 'nail fungus and other nail disease': '‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ‡πÄ‡∏•‡πá‡∏ö', 'poison ivy photos and other contact dermatitis': '‡∏ú‡∏∑‡πà‡∏ô‡πÅ‡∏û‡πâ‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™', 'psoriasis pictures lichen planus and related diseases': '‡πÇ‡∏£‡∏Ñ‡∏™‡∏∞‡πÄ‡∏Å‡πá‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á', 'scabies lyme disease and other infestations and bites': '‡πÇ‡∏£‡∏Ñ‡∏´‡∏¥‡∏î, ‡πÇ‡∏£‡∏Ñ‡πÑ‡∏•‡∏°‡πå, ‡πÅ‡∏°‡∏•‡∏á‡∏Å‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏¢', 'seborrheic keratoses and other benign tumors': '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏á‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏¥‡πà‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)', 'systemic disease': '‡πÇ‡∏£‡∏Ñ‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á', 'tinea ringworm candidiasis and other fungal infections': '‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤ (‡∏Å‡∏•‡∏≤‡∏Å, ‡πÄ‡∏Å‡∏•‡∏∑‡πâ‡∏≠‡∏ô)', 'urticaria hives': '‡∏•‡∏°‡∏û‡∏¥‡∏©', 'vascular tumors': '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏á‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î', 'vasculitis photos': '‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö', 'warts molluscum and other viral infections': '‡∏´‡∏π‡∏î, ‡∏´‡∏π‡∏î‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏∏‡∏Å ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡∏£‡∏±‡∏™‡∏≠‡∏∑‡πà‡∏ô'
}

# --- UI ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
with st.sidebar:
    st.title("‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô")
    st.info("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    st.warning("**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏ô‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î")
st.title("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô üë©‚Äç‚öïÔ∏è")
analysis_type = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:", ("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ß", "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"))
st.write(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: **{analysis_type}** | ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û")
try:
    if analysis_type == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•":
        processor, model = load_wound_model()
        translation_dict = wound_translation_dict
    elif analysis_type == "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ß":
        processor, model = load_acne_model()
        translation_dict = acne_translation_dict
    else: 
        processor, model = load_dermatology_model()
        translation_dict = dermatology_translation_dict
except Exception as e:
    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")
    st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    st.stop()
tab1, tab2 = st.tabs(["üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", "üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û"])
with tab1:
    uploaded_file = st.file_uploader("‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", type=["jpg", "jpeg", "png"], label_visibility="collapsed")
with tab2:
    camera_file = st.camera_input("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á")
image_file = uploaded_file or camera_file
if image_file is not None:
    col1, col2 = st.columns(2, gap="large")
    image = Image.open(image_file)
    with col1:
        st.subheader("üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        st.image(image, use_container_width=True)
        analyze_button = st.button("‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", use_container_width=True, type="primary")
    with col2:
        st.subheader("üìà ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
        if analyze_button:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"):
                predictions = predict(image, processor, model)
                with st.container(border=True):
                    top_prediction = predictions[0]
                    thai_label = translation_dict.get(top_prediction['label'].lower(), top_prediction['label'])
                    st.metric(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", value=thai_label, delta=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {top_prediction['score']:.2%}")
                with st.expander(f"‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ"):
                    for p in predictions:
                        thai_label_list = translation_dict.get(p['label'].lower(), p['label'])
                        st.write(f"- **{thai_label_list}**: {p['score']:.2%}")
        else:
            st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")