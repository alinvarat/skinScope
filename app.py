# app.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå)

import streamlit as st
from PIL import Image
import torch
from transformers import AutoImageProcessor, AutoModelForImageClassification

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
st.set_page_config(layout="wide", page_title="‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß", page_icon="üë©‚Äç‚öïÔ∏è")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
@st.cache_resource
def load_wound_model():
    processor = AutoImageProcessor.from_pretrained("Hemg/Wound-Image-classification")
    model = AutoModelForImageClassification.from_pretrained("Hemg/Wound-Image-classification")
    return processor, model

@st.cache_resource
def load_acne_model():
    model_name = "imfarzanansari/skintelligent-acne"
    processor = AutoImageProcessor.from_pretrained(model_name)
    model = AutoModelForImageClassification.from_pretrained(model_name)
    return processor, model

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
def predict(image, processor, model):
    if image.mode != "RGB":
        image = image.convert("RGB")
    inputs = processor(images=image, return_tensors="pt")
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
    probabilities = torch.nn.functional.softmax(logits, dim=-1)
    num_classes = model.config.num_labels
    k_value = min(num_classes, 6)
    top_prob, top_catid = torch.topk(probabilities, k_value)
    
    results = []
    for i in range(top_prob.size(1)):
        label = model.config.id2label[top_catid[0][i].item()]
        prob = top_prob[0][i].item()
        results.append({"label": label, "score": prob})
    return results

# --- ‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
wound_translation_dict = {
    "Abrasions": "‡πÅ‡∏ú‡∏•‡∏ñ‡∏•‡∏≠‡∏Å", "Bruises": "‡πÅ‡∏ú‡∏•‡∏ü‡∏Å‡∏ä‡πâ‡∏≥", "Burns": "‡πÅ‡∏ú‡∏•‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ/‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô‡∏•‡∏ß‡∏Å",
    "Cut": "‡πÅ‡∏ú‡∏•‡∏ö‡∏≤‡∏î / ‡πÅ‡∏ú‡∏•‡∏ï‡∏±‡∏î", "Diabetic Wounds": "‡πÅ‡∏ú‡∏•‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô", "Laceration": "‡πÅ‡∏ú‡∏•‡∏â‡∏µ‡∏Å‡∏Ç‡∏≤‡∏î",
    "Normal": "‡∏ú‡∏¥‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥", "Pressure Wounds": "‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö", "Venous Wounds": "‡πÅ‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏î‡∏≥",
    "extravasation-wound-images": "‡πÅ‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß‡∏Ç‡∏≠‡∏á‡∏¢‡∏≤", "foot-ulcers": "‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πâ‡∏≤",
    "haemangioma": "‡∏õ‡∏≤‡∏ô‡πÅ‡∏î‡∏á", "leg-ulcer-images": "‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤", "malignant-wound-images": "‡πÅ‡∏ú‡∏•‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á",
    "meningitis": "‡πÅ‡∏ú‡∏•‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏°‡∏™‡∏°‡∏≠‡∏á‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö", "miscellaneous": "‡πÅ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    "orthopaedic-wounds": "‡πÅ‡∏ú‡∏•‡∏®‡∏±‡∏•‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å", "pilonidal-sinus": "‡∏ù‡∏µ‡∏Ñ‡∏±‡∏ì‡∏ë‡∏™‡∏π‡∏ï‡∏£",
    "pressure-ulcer-images-a": "‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó A)", "pressure-ulcer-images-b": "‡πÅ‡∏ú‡∏•‡∏Å‡∏î‡∏ó‡∏±‡∏ö (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó B)",
    "toes": "‡πÅ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡πâ‡∏ß‡πÄ‡∏ó‡πâ‡∏≤"
}
acne_translation_dict = {
    "level -1": "‡∏ú‡∏¥‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥ (Clear Skin)", "level 0": "‡∏°‡∏µ‡∏™‡∏¥‡∏ß‡∏õ‡∏£‡∏∞‡∏õ‡∏£‡∏≤‡∏¢ (Occasional Spots)",
    "level 1": "‡∏™‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (Mild Acne)", "level 2": "‡∏™‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Moderate Acne)",
    "level 3": "‡∏™‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á (Severe Acne)", "level 4": "‡∏™‡∏¥‡∏ß‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å (Very Severe Acne)"
}


# --- ‡∏™‡πà‡∏ß‡∏ô UI ‡∏´‡∏•‡∏±‡∏Å ---
st.title("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏ú‡∏¥‡∏ß‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô üë©‚Äç‚öïÔ∏è")

# ******** 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ********
tab_wound, tab_acne = st.tabs(["ü©π  ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•", "üòä  ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ß"])


# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•" ---
with tab_wound:
    st.header("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•")
    st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•
    wound_processor, wound_model = load_wound_model()
    
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏î‡πÄ‡∏à‡πá‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    wound_uploader = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏•", type=["jpg", "jpeg", "png"], key="wound_uploader")
    wound_camera = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏•", key="wound_camera")
    wound_image_file = wound_uploader or wound_camera

    if wound_image_file:
        col1, col2 = st.columns(2, gap="large")
        wound_image = Image.open(wound_image_file)

        with col1:
            st.image(wound_image, caption="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•", use_container_width=True)
            analyze_wound_button = st.button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•", use_container_width=True, type="primary", key="wound_button")

        with col2:
            if analyze_wound_button:
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                    predictions = predict(wound_image, wound_processor, wound_model)
                    with st.container(border=True):
                        top_prediction = predictions[0]
                        thai_label = wound_translation_dict.get(top_prediction['label'], top_prediction['label'])
                        st.metric(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", value=thai_label, delta=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {top_prediction['score']:.2%}")
                    with st.expander("‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å"):
                        for p in predictions:
                            st.write(f"- **{wound_translation_dict.get(p['label'], p['label'])}**: {p['score']:.2%}")


# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ß" ---
with tab_acne:
    st.header("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ß")
    st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ß")

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ß
    acne_processor, acne_model = load_acne_model()
    
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏î‡πÄ‡∏à‡πá‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    acne_uploader = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ß", type=["jpg", "jpeg", "png"], key="acne_uploader")
    acne_camera = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ß", key="acne_camera")
    acne_image_file = acne_uploader or acne_camera

    if acne_image_file:
        col1, col2 = st.columns(2, gap="large")
        acne_image = Image.open(acne_image_file)

        with col1:
            st.image(acne_image, caption="‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ß", use_container_width=True)
            analyze_acne_button = st.button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ß", use_container_width=True, type="primary", key="acne_button")

        with col2:
            if analyze_acne_button:
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."):
                    predictions = predict(acne_image, acne_processor, acne_model)
                    with st.container(border=True):
                        top_prediction = predictions[0]
                        thai_label = acne_translation_dict.get(top_prediction['label'], top_prediction['label'])
                        st.metric(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", value=thai_label, delta=f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {top_prediction['score']:.2%}")
                    with st.expander("‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                        for p in predictions:
                            st.write(f"- **{acne_translation_dict.get(p['label'], p['label'])}**: {p['score']:.2%}")